import json
import os

import psycopg2 as pg
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from docx2pdf import convert as pdf_convert
from docxtpl import DocxTemplate
from psycopg2 import extras

from source.buttons import *
from source.db_requests import *

script_path = os.path.abspath(__file__)
script_directory = os.path.dirname(script_path)
os.chdir(script_directory)
project_folder = os.getcwd()

with open(f'{project_folder}\config.json', encoding='utf-8') as f:
    config_data = json.load(f)

bot = Bot(token=config_data['bot']['token'], parse_mode="Markdown")
dp = Dispatcher(bot, storage=MemoryStorage())

modules = {}

radio_status = False
radio_flags = []


class Feedback(StatesGroup):
    feedback_text = State()
    feedback_mark = State()


class Radio(StatesGroup):
    request = State()


try:
    db_config = config_data['database']
    connection = pg.connect(
        host=db_config['host'],
        port=db_config['port'],
        user=db_config['user'],
        password=db_config['password'],
        database=db_config['db_name'],
    )
    cur = connection.cursor(cursor_factory=extras.RealDictCursor)
    print("Connected!")
except Exception as err:
    print("Not connected")


@dp.callback_query_handler()
async def check_callback(callback: types.CallbackQuery):
    print(callback.data)
    user_status, action = callback.data.split("_")[0], callback.data.split("_")[1]
    tID = callback.message.chat.id
    if user_status == "admin":
        if action == "getfeedback":
            modules_list = await get_modules_list()
            mk = types.InlineKeyboardMarkup(row_width=1)
            for module in modules_list:
                mk.add(types.InlineKeyboardButton(text=f"{module['module_name']}",
                                                  callback_data=f"admin_sendfeedback_{module['tutor_id']}"))
            mk.add(types.InlineKeyboardButton(text="–í—Å–µ –º–æ–¥—É–ª–∏", callback_data=f"admin_sendfeedback_all"))
            await bot.send_message(text="*–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏*", chat_id=tID, reply_markup=mk)
        elif action == "sendfeedback":
            await bot.delete_message(chat_id=tID, message_id=callback.message.message_id)
            module_id = callback.data.split("_")[-1]
            if module_id != "all":
                await send_feedback(module_id, tID)
            else:
                data = await get_modules_list()
                for a in data:
                    await send_feedback(a['tutor_id'], tID)
        elif action == "restart":
            mk = types.InlineKeyboardMarkup(row_width=1).add(
                types.InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ CROD.CONNECT", url="https://clck.ru/36XFzU"))
            await callback.message.answer(text="*–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–º–µ–Ω—ã –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å CROD.CONNECT*",
                                          reply_markup=mk)
        elif action == "approveradio":
            child_id = callback.data.split("_")[-1]
            await bot.edit_message_text(chat_id=tID, message_id=callback.message.message_id,
                                        text=callback.message.text + "\n\nüü¢ *–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞*")
            await bot.send_message(chat_id=child_id,
                                   text="üì®*–¢—É–∫-—Ç—É–∫, –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ*\n\n*–¢–≤–æ—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞–¥–∏–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, –∂–¥–∏ –≤ —ç—Ñ–∏—Ä–µ —É–∂–µ —Å–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ!*")
            radio_flags.remove(int(child_id))
        elif action == "declineradio":
            child_id = callback.data.split("_")[-1]
            await bot.edit_message_text(chat_id=tID, message_id=callback.message.message_id,
                                        text=callback.message.text + "\n\nüî¥ *–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞*")
            await bot.send_message(chat_id=child_id,
                                   text="üì®*–¢—É–∫-—Ç—É–∫, –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ*\n\n*–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–≤–æ—è –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, –≤–æ–∑–º–æ–∂–Ω–æ –æ–Ω–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ —Ü–µ–Ω–∑—É—Ä—É, –Ω–æ —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—É—é, –ø–æ–∫–∞ –Ω–∞—à–µ —Ä–∞–¥–∏–æ –≤ —ç—Ñ–∏—Ä–µ*")
            radio_flags.remove(int(child_id))

    elif user_status == "mentors":
        if action == "childrenlist":
            mentor_group = await get_mentor_group(tID)
            children_list = await get_children_list(filter='group', value=int(mentor_group))
            if len(children_list) != 0:
                text = ""
                for a in range(len(children_list)):
                    text += f"\n{a + 1}. {children_list[a][0]} {children_list[a][1]}"
                await bot.send_message(chat_id=tID, text=text)
            else:
                await callback.answer(text="–°–ø–∏—Å–æ–∫ –¥–µ—Ç–µ–π –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", show_alert=True)

    elif user_status == "tutor":
        module_info = await get_module_info(tID)
        if action == "childrenlist":
            children_list = await get_children_list(filter='modules', value=module_info['tutor_id'])
            if len(children_list) != 0:
                pass
            else:
                await callback.answer("–ù–∞ –≤–∞—à –º–æ–¥—É–ª—å –ø–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω", show_alert=True)
        elif action == "getfeedback":
            await send_feedback(tID, tID)

    elif user_status == "children":
        if action == "modules":
            await reg_modules_process(tID)
        elif action == "addmodule":
            avaliable_modules = await get_registered_modules(tID)
            if len(avaliable_modules) < config_data['modules_count']:
                module_id = callback.data.split("_")[-1]
                if module_id not in modules[tID]:
                    if await seats(module_id):
                        # await callback.answer(f"–ó–∞–ø–∏—Å—å –Ω–∞ –º–æ–¥—É–ª—å {module_id} —É—Å–ø–µ—à–Ω–∞!", show_alert=True)
                        await bot.delete_message(chat_id=tID, message_id=callback.message.message_id)
                        modules[tID].append(module_id)
                        await add_module_to_children(tID, module_id)
                        await reg_modules_process(tID)

                    else:
                        await callback.answer(
                            text="–ù–∞ —ç—Ç–æ–º –º–æ–¥—É–ª–µ —É–∂–µ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç, –≤—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–π –º–æ–¥—É–ª—å",
                            show_alert=True)
                else:
                    await callback.answer(
                        text="–ù–µ–ª—å–∑—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –æ–¥–∏–Ω –º–æ–¥—É–ª—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑, –≤—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–π –º–æ–¥—É–ª—å",
                        show_alert=True)
            else:
                await callback.answer(text="–¢—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω(-–∞) –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥—É–ª–µ–π",
                                      show_alert=True)

        elif action == "sendfeedback":
            # # –ø–æ–ª—É—á–∞—é –∏–∑ feedback –≤—Å–µ —Ñ–∏–¥–±–µ–∫–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –æ—Ç –¥–∞–Ω–Ω–æ–≥–æ —Ä–µ–±—ë–Ω–∫–∞
            # feedback_list = await get_feedback_by_child(tID)
            # if len(feedback_list) < config_data['modules_count']:
            #     pass
            # # –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–¥–±–µ–∫–æ–≤ –º–µ–Ω—å—à–µ, —á–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥—É–ª–µ–π, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∏–¥–±–µ–∫–æ–º –ø–æ –ø–µ—Ä–≤–æ–º—É –º–æ–¥—É–ª—é
            # # –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–≤–æ–≥–æ —Ñ–∏–¥–µ–±–∫–∞ —Å–Ω–æ–≤–∞ –¥–µ–ª–∞—é –∑–∞–ø—Ä–æ—Å —Ñ–∏–¥–±–µ–∫–æ–≤ –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
            # # –µ—Å–ª–∏ —Ñ–∏–¥–±–µ–∫–æ–≤ –º–µ–Ω—å—à–µ, —á–µ–º –Ω–∞–¥–æ, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å –ø–æ –º–æ–¥—É–ª—é, –∏–Ω–∞—á–µ –æ–∫–æ–Ω—á–∞–Ω–∏–µ –æ–±—Ä–∞—Ç–∫–∏
            # # –∏–Ω–∞—á–µ –≥–æ–≤–æ—Ä—é, —á—Ç–æ –≤—Å—ë —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
            pass

        elif action == "radio":
            if radio_status:
                if tID not in radio_flags:
                    await bot.delete_message(chat_id=tID, message_id=callback.message.message_id)
                    await Radio.request.set()
                    await bot.send_message(chat_id=tID,
                                           text="*–†–∞–¥–∏–æ –∂–¥—ë—Ç –∏–º–µ–Ω–Ω–æ —Ç–µ–±—è!* \n\n–û—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏, —á—Ç–æ–±—ã –º—ã –≤–∫–ª—é—á–∏–ª–∏ –µ—ë –Ω–∞ –Ω–∞—à–µ–º —Ä–∞–¥–∏–æ "
                                                "–∏–ª–∏ –Ω–∞–ø–∏—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –º—ã –æ–∑–≤—É—á–∏–º –≤ –ø—Ä—è–º–æ–º —ç—Ñ–∏—Ä–µ! (–Ω–µ –∑–∞–±—É–¥—å —É–∫–∞–∑–∞—Ç—å, "
                                                "–∫–æ–º—É –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–æ –ø–æ–∂–µ–ª–∞–Ω–∏–µ)"
                                                "\n\n–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥, –æ—Ç–ø—Ä–∞–≤—å /start"
                                                "\n\n_–í—Å–µ –∑–∞—è–≤–∫–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Ü–µ–Ω–∑—É—Ä—É, –ø–æ—ç—Ç–æ–º—É –Ω–µ –≤—Å–µ –ø–µ—Å–Ω–∏ –º–æ–≥—É—Ç –ø—Ä–æ–∑–≤—É—á–∞—Ç—å –≤ —ç—Ñ–∏—Ä–µ_")
                else:
                    await callback.answer(
                        text="–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞. –ü–æ–¥–æ–∂–¥–∏, –ø–æ–∫–∞ –º—ã –µ—ë –æ–±—Ä–∞–±–æ—Ç–∞–µ–º, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—É—é",
                        show_alert=True)
            else:
                await callback.answer(
                    text="–°–µ–π—á–∞—Å –Ω–∞—à–µ —Ä–∞–¥–∏–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –º—ã –±—É–¥–µ–º –≤ —ç—Ñ–∏—Ä–µ, —Ç–µ–±–µ –ø—Ä–∏–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!",
                    show_alert=True)


async def error(func_name, err):
    err_text = f"Error in {func_name}: {err}"
    print(err_text)


async def reg_modules_process(tID):
    avaliable_modules = await get_registered_modules(tID)
    if len(avaliable_modules) < config_data['modules_count']:
        modules[tID] = []
        modules_list = await get_modules_list()
        mk = types.InlineKeyboardMarkup(row_width=1)
        for a in range(len(modules_list)):
            mk.add(types.InlineKeyboardButton(text=modules_list[a]['module_name'],
                                              callback_data=f"children_addmodule_{modules_list[a]['tutor_id']}"))
        await bot.send_message(text=f"–í—ã–±–µ—Ä–∏ –º–æ–¥—É–ª—å ‚Ññ{len(avaliable_modules) + 1}", reply_markup=mk, chat_id=tID)
    else:
        text_to_send = "*–°–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ç—ã –∑–∞–ø–∏—Å–∞–Ω(-–∞)*"
        for a in range(len(avaliable_modules)):
            module_info = await get_module_info(avaliable_modules[a]['module_id'])
            text_to_send += f"\n\n*{a + 1}. {module_info['module_name']}*\n–õ–æ–∫–∞—Ü–∏—è: *{module_info['location']}*"
        text_to_send += "\n\n–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –æ–¥–∏–Ω –∏–∑ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π, —Ç–æ –Ω–∞–ø–∏—à–∏ —Å—é–¥–∞: @lrrrtm"
        await bot.send_message(chat_id=tID, text=text_to_send)


async def seats(module_id):
    cur.execute(f"SELECT seats_num, seats_real FROM modules WHERE tutor_id = '{module_id}'")
    data = cur.fetchone()
    if data['seats_real'] < data['seats_num']:
        return True
    return False


async def send_feedback(tutor_id, tID):
    module_info = await get_module_info(tutor_id)
    cur_date_dmy = datetime.datetime.now().strftime("%d.%m.%Y")
    doc = DocxTemplate(fr"{project_folder}\assets\feedback_template.docx")
    context = {"module_name": module_info['module_name'],
               "feedback_date": cur_date_dmy,
               "create_time": datetime.datetime.now().strftime("%d.%m.%Y –≤ %H:%M"),
               }
    fb = await get_feedback_by_module(tutor_id)
    if len(fb) != 0:
        for a in range(len(fb)):
            if a < len(fb):
                context[f"answer{a + 1}"] = fb[a]['answer']
            else:
                context[f"{a + 1}"] = " "
        doc.render(context)
        src = fr"{project_folder}\files\docs\fb_docs\{module_info['module_name']}-{cur_date_dmy}.docx"
        src_pdf = fr"{project_folder}\files\pdf\{module_info['module_name']}-{cur_date_dmy}.pdf"
        with open(src, "w") as f:
            f.close()
        doc.save(src)
        msg = await bot.send_message(chat_id=tID, text="–û—Ç—á—ë—Ç –ø–æ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ —Å–æ–∑–¥–∞—ë—Ç—Å—è...")
        pdf_convert(src, src_pdf)
        await bot.delete_message(chat_id=tID, message_id=msg.message_id)
        await bot.send_document(chat_id=tID, document=open(src_pdf, 'rb'))
    else:
        await bot.send_message(chat_id=tID, text=f"–ü–æ –º–æ–¥—É–ª—é {module_info['module_name']} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç "
                                                 f"–æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –∑–∞ {cur_date_dmy}")


async def update_config():
    try:
        with open(f'{project_folder}\config.json', encoding='utf-8', mode="w") as f:
            json.dump(config_data, f)
        return True
    except Exception as e:
        error(update_config.__name__, e)
        return False


async def check_status(tid, st):
    try:
        cur.execute(f"SELECT status FROM admins WHERE tid = {tid}")
        status = cur.fetchall()
        print(status)
        if len(status) != 0:
            if status[0]['status'] == st:
                return True
        return False
    except Exception as e:
        error(check_status.__name__, e)


@dp.message_handler(state=Radio.request)
async def cmd_radio_request(message: types.Message, state: FSMContext):
    await state.finish()
    if message.text == "/start":
        await cmd_start(message)
    else:
        text_to_admin = "*–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!*" \
                        f"\n\n{message.text.strip()}"
        mk = types.InlineKeyboardMarkup(row_width=2)
        mk.row(types.InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—å üü¢", callback_data=f"admin_approveradio_{message.chat.id}"),
               types.InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å üî¥", callback_data=f"admin_declineradio_{message.chat.id}")
               )
        radio_flags.append(message.chat.id)
        print(radio_flags)
        await bot.send_message(chat_id=config_data['chat_ids']['radio'], text=text_to_admin, reply_markup=mk)
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id - 1)
        await bot.send_message(chat_id=message.chat.id, text="*–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞–¥–∏–æ*"
                                                             "\n*–¢–≤–æ—è –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ –∂–¥—ë—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è*"
                                                             f"\n\n–¢–µ–∫—Å—Ç —Ç–≤–æ–µ–π –∑–∞—è–≤–∫–∏: {message.text.strip()}")


@dp.message_handler(commands=['setupmain', 'setupradio', 'setupfback', 'setupmodules'])
async def cmd_setup(message: types.Message):
    tID = message.from_user.id
    if await check_status(tID, "admin"):
        command = message.get_command()[1:].split('setup')[1]
        config_data['chat_ids'][command] = message.chat.id
        if await update_config():
            await message.answer(text=f"–î–∞–Ω–Ω–∞—è –±–µ—Å–µ–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–∞—è –¥–ª—è {command}")
        else:
            await message.answer(text=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    else:
        await message.answer(text="*–í–∞—à —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É.*"
                                  "\n\n–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")


@dp.message_handler(commands=['radio'])
async def cmd_radio_control(message: types.Message):
    tID = message.chat.id
    if tID == config_data['chat_ids']['radio']:
        if message.chat.id == config_data['chat_ids']['radio']:
            mk = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            mk.add(types.KeyboardButton(text="üü¢ –í–ö–õ–Æ–ß–ò–¢–¨ –†–ê–î–ò–û üü¢"))
            mk.add(types.KeyboardButton(text="üî¥ –í–´–ö–õ–Æ–ß–ò–¢–¨ –†–ê–î–ò–û üî¥"))
            await message.answer(text="–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–¥–∏–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞", reply_markup=mk)
        else:
            await message.answer(text=f"*–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–¥–∏–æ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∏–∑ –±–µ—Å–µ–¥—ã [–†–ê–î–ò–û]*")
    else:
        await message.answer(text="*–í–∞—à —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É.*"
                                  "\n\n–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")


@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    start_param = message.get_args()
    tID = message.chat.id
    print(start_param, tID)
    if str(tID)[0] != "-":
        if start_param:
            start_data = start_param.split("_")
            if start_data[0] == "resolume" and await check_status(tID, 'admin'):
                await message.answer(
                    text="–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ Resolume, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –≤–∏–¥–µ–æ")
            else:
                info_by_phrase = await get_info_by_phrase(start_data[0], start_data[1], tID)
                if info_by_phrase:
                    if start_data[0] == "admins":
                        if info_by_phrase['status'] == "tutor":
                            await add_tutor_to_module(tID, info_by_phrase[3])
                        await message.answer(text=f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!"
                                                  f"\n\n–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ: *{info_by_phrase['firstname']} {info_by_phrase['lastname']}*"
                                                  f"\n–î–æ–ª–∂–Ω–æ—Å—Ç—å/–º–æ–¥—É–ª—å: *{info_by_phrase['post']}*"
                                                  f"\n–ì—Ä—É–ø–ø–∞: *{config_data['statuses'][info_by_phrase['status']]['rus']}*"
                                                  f"\n\n*–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start*")

                    elif start_data[0] == "children":
                        await message.answer(text=f"*{config_data['welcome_text']}*"
                                                  f"\n\n–¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ: *{info_by_phrase['firstname']} {info_by_phrase['lastname']}*"
                                                  f"\n–ì—Ä—É–ø–ø–∞: {info_by_phrase['group_num']}"
                                                  f"\n\n*–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start*")
                elif info_by_phrase is False:
                    await message.answer(
                        text="–ü–æ —ç—Ç–æ–º—É QR-–∫–æ–¥—É —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –∫—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–π. –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–∞–∫, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")

        else:
            reg_info = await registered(tID)
            if reg_info is False:
                await message.answer(
                    "–ü—Ä–∏–≤–µ—Ç!\n–Ø –±–æ—Ç –¶–µ–Ω—Ç—Ä–∞ –†–∞–∑–≤–∏—Ç–∏—è –û–¥–∞—Ä—ë–Ω–Ω—ã—Ö –î–µ—Ç–µ–π. –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å QR-–∫–æ–¥, –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π –µ–≥–æ, —Ç–æ–≥–¥–∞ —Ç—ã —Å–º–æ–∂–µ—à—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!")
                pass
            else:
                text = "*–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*"
                if reg_info == "admin":
                    mk = admin_markup
                elif reg_info == "mentors":
                    mk = mentor_markup
                elif reg_info == "tutor":
                    mk = tutor_markup
                elif reg_info == "children":
                    text = "*–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å? –í—ã–±–µ—Ä–∏ –∏ –Ω–∞–∂–º–∏ –Ω–∞ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É*" \
                           "\n\n–í–∞–∂–Ω–æ: –µ—Å–ª–∏ –≤–¥—Ä—É–≥ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –æ–±—Ä–∞—Ç–∏—Å—å —Å –≤–æ–ø—Ä–æ—Å–æ–º –∫ –≤–æ—Å–ø–∏—Ç–∞—Ç–µ–ª—è–º, –æ–Ω–∏ –ø–æ–º–æ–≥—É—Ç —Ç–µ–±–µ —Ä–µ—à–∏—Ç—å –ª—é–±—É—é –ø—Ä–æ–±–ª–µ–º—É"
                    mk = children_markup
                await message.answer(text=text,
                                     reply_markup=mk)
    else:
        await message.answer(text="*–î–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ —ç—Ç–æ–º —á–∞—Ç–µ*")


@dp.message_handler(content_types=['text'])
async def testf(message: types.Message):
    if message.chat.id == config_data['chat_ids']['radio'] and message.text in ['üü¢ –í–ö–õ–Æ–ß–ò–¢–¨ –†–ê–î–ò–û üü¢',
                                                                                'üî¥ –í–´–ö–õ–Æ–ß–ò–¢–¨ –†–ê–î–ò–û üî¥']:
        global radio_status
        if message.text == "üî¥ –í–´–ö–õ–Æ–ß–ò–¢–¨ –†–ê–î–ò–û üî¥":
            radio_status = False
            await bot.send_message(message.chat.id, "*–†–∞–¥–∏–æ –≤—ã–∫–ª—é—á–µ–Ω–æ, –∑–∞—è–≤–∫–∏ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è!*")
        else:
            radio_status = True
            await bot.send_message(message.chat.id, "*–†–∞–¥–∏–æ –≤–∫–ª—é—á–µ–Ω–æ, –∏–¥—ë—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–µ—Ç—è–º*")
            cur.execute(f"SELECT tid, firstname FROM children")
            data = cur.fetchall()
            if data:
                for child in data:
                    await bot.send_message(chat_id=child['tid'],
                                           text=f"*{child['firstname']}, –Ω–∞—à–µ —Ä–∞–¥–∏–æ –≤ —ç—Ñ–∏—Ä–µ! –°–∫–æ—Ä–µ–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π —Å–≤–æ–∏ –ø—Ä–∏–≤–µ—Ç—ã –∏ –ø–µ—Å–Ω–∏, —á—Ç–æ–±—ã –∏—Ö —É—Å–ª—ã—à–∞–ª –≤–µ—Å—å –¶–†–û–î!*",
                                           reply_markup=types.InlineKeyboardMarkup().add(
                                               types.InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Ä–∞–¥–∏–æ üìª",
                                                                          callback_data="children_radio")))


async def on_startup(dp):
    try:
        await bot.send_message(chat_id=config_data['chat_ids']['radio'], text='*–°–∏—Å—Ç–µ–º–∞ CROD.CONNECT –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞*'
                                                                              '\n–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Ä–∞–¥–∏–æ: –≤—ã–∫–ª—é—á–µ–Ω–æ.'
                                                                              '\n\n_–î–ª—è –ø–æ–∫–∞–∑–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ /radio_')
        await bot.send_message(chat_id=config_data['chat_ids']['fback'], text='*–°–∏—Å—Ç–µ–º–∞ CROD.CONNECT –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞*'
                                                                              '\n–ú–æ–¥—É–ª—å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∞–∫—Ç–∏–≤–µ–Ω')
        await bot.send_message(chat_id=config_data['chat_ids']['modules'], text='*–°–∏—Å—Ç–µ–º–∞ CROD.CONNECT –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞*'
                                                                                '\n–ú–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º –º–æ–¥—É–ª—è–º –∞–∫—Ç–∏–≤–µ–Ω')
    except Exception:
        pass


if __name__ == '__main__':
    from aiogram import executor

    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
